/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FactoryInterface extends ethers.utils.Interface {
  functions: {
    "REVISION()": FunctionFragment;
    "getAllLendables()": FunctionFragment;
    "getAllTradables()": FunctionFragment;
    "getOrCreatePool(address,address)": FunctionFragment;
    "getOrCreateReserve(address)": FunctionFragment;
    "getPool(address,address)": FunctionFragment;
    "getReserve(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isPool(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "parseTokens(address,address)": FunctionFragment;
    "poolBytecodeHash()": FunctionFragment;
    "registerLendable(address)": FunctionFragment;
    "registerLendables(address[])": FunctionFragment;
    "registerTradable(address)": FunctionFragment;
    "registerTradables(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveBytecodeHash()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "REVISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllLendables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTradables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreatePool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreateReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getReserve", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isPool", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerLendable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLendables",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTradable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTradables",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "REVISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllLendables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTradables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreatePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreateReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLendable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLendables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTradable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTradables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Factory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FactoryInterface;

  functions: {
    REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "REVISION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllLendables(overrides?: CallOverrides): Promise<[string[]]>;

    "getAllLendables()"(overrides?: CallOverrides): Promise<[string[]]>;

    getAllTradables(overrides?: CallOverrides): Promise<[string[]]>;

    "getAllTradables()"(overrides?: CallOverrides): Promise<[string[]]>;

    getOrCreatePool(
      lendable: string,
      tradable: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCreatePool(address,address)"(
      lendable: string,
      tradable: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrCreateReserve(
      lendable: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCreateReserve(address)"(
      lendable: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPool(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getPool(address,address)"(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReserve(lendable: string, overrides?: CallOverrides): Promise<[string]>;

    "getReserve(address)"(
      lendable: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      pancakeFactory: string,
      pancakeRouter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      pancakeFactory: string,
      pancakeRouter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isPool(pool: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isPool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    parseTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { lendable: string; tradable: string }>;

    "parseTokens(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { lendable: string; tradable: string }>;

    poolBytecodeHash(overrides?: CallOverrides): Promise<[string]>;

    "poolBytecodeHash()"(overrides?: CallOverrides): Promise<[string]>;

    registerLendable(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerLendable(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerLendables(
      tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerLendables(address[])"(
      tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerTradable(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerTradable(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerTradables(
      tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerTradables(address[])"(
      tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    reserveBytecodeHash(overrides?: CallOverrides): Promise<[string]>;

    "reserveBytecodeHash()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  "REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAllLendables(overrides?: CallOverrides): Promise<string[]>;

  "getAllLendables()"(overrides?: CallOverrides): Promise<string[]>;

  getAllTradables(overrides?: CallOverrides): Promise<string[]>;

  "getAllTradables()"(overrides?: CallOverrides): Promise<string[]>;

  getOrCreatePool(
    lendable: string,
    tradable: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrCreatePool(address,address)"(
    lendable: string,
    tradable: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrCreateReserve(
    lendable: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrCreateReserve(address)"(
    lendable: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPool(
    lendable: string,
    tradable: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPool(address,address)"(
    lendable: string,
    tradable: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getReserve(lendable: string, overrides?: CallOverrides): Promise<string>;

  "getReserve(address)"(
    lendable: string,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    pancakeFactory: string,
    pancakeRouter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    pancakeFactory: string,
    pancakeRouter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isPool(pool: string, overrides?: CallOverrides): Promise<boolean>;

  "isPool(address)"(pool: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  parseTokens(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { lendable: string; tradable: string }>;

  "parseTokens(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { lendable: string; tradable: string }>;

  poolBytecodeHash(overrides?: CallOverrides): Promise<string>;

  "poolBytecodeHash()"(overrides?: CallOverrides): Promise<string>;

  registerLendable(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerLendable(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerLendables(
    tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerLendables(address[])"(
    tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerTradable(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerTradable(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerTradables(
    tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerTradables(address[])"(
    tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  reserveBytecodeHash(overrides?: CallOverrides): Promise<string>;

  "reserveBytecodeHash()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllLendables(overrides?: CallOverrides): Promise<string[]>;

    "getAllLendables()"(overrides?: CallOverrides): Promise<string[]>;

    getAllTradables(overrides?: CallOverrides): Promise<string[]>;

    "getAllTradables()"(overrides?: CallOverrides): Promise<string[]>;

    getOrCreatePool(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOrCreatePool(address,address)"(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getOrCreateReserve(
      lendable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOrCreateReserve(address)"(
      lendable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPool(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPool(address,address)"(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getReserve(lendable: string, overrides?: CallOverrides): Promise<string>;

    "getReserve(address)"(
      lendable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      pancakeFactory: string,
      pancakeRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      pancakeFactory: string,
      pancakeRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isPool(pool: string, overrides?: CallOverrides): Promise<boolean>;

    "isPool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    parseTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { lendable: string; tradable: string }>;

    "parseTokens(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { lendable: string; tradable: string }>;

    poolBytecodeHash(overrides?: CallOverrides): Promise<string>;

    "poolBytecodeHash()"(overrides?: CallOverrides): Promise<string>;

    registerLendable(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registerLendable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerLendables(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registerLendables(address[])"(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerTradable(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registerTradable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerTradables(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registerTradables(address[])"(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    reserveBytecodeHash(overrides?: CallOverrides): Promise<string>;

    "reserveBytecodeHash()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllLendables(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllLendables()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllTradables(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllTradables()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOrCreatePool(
      lendable: string,
      tradable: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getOrCreatePool(address,address)"(
      lendable: string,
      tradable: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOrCreateReserve(
      lendable: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getOrCreateReserve(address)"(
      lendable: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPool(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPool(address,address)"(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserve(lendable: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getReserve(address)"(
      lendable: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      pancakeFactory: string,
      pancakeRouter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      pancakeFactory: string,
      pancakeRouter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isPool(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isPool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    parseTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "parseTokens(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolBytecodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    "poolBytecodeHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerLendable(token: string, overrides?: Overrides): Promise<BigNumber>;

    "registerLendable(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerLendables(
      tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerLendables(address[])"(
      tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerTradable(token: string, overrides?: Overrides): Promise<BigNumber>;

    "registerTradable(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerTradables(
      tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerTradables(address[])"(
      tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    reserveBytecodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveBytecodeHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "REVISION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllLendables(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllLendables()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllTradables(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllTradables()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrCreatePool(
      lendable: string,
      tradable: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCreatePool(address,address)"(
      lendable: string,
      tradable: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrCreateReserve(
      lendable: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCreateReserve(address)"(
      lendable: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPool(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPool(address,address)"(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserve(
      lendable: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserve(address)"(
      lendable: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      pancakeFactory: string,
      pancakeRouter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      pancakeFactory: string,
      pancakeRouter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isPool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "parseTokens(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolBytecodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolBytecodeHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerLendable(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerLendable(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerLendables(
      tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerLendables(address[])"(
      tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerTradable(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerTradable(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerTradables(
      tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerTradables(address[])"(
      tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    reserveBytecodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserveBytecodeHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
