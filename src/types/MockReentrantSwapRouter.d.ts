/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockReentrantSwapRouterInterface extends ethers.utils.Interface {
  functions: {
    "callClosePosition()": FunctionFragment;
    "callLiquidatePosition()": FunctionFragment;
    "callOpenPosition()": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "callClosePosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callLiquidatePosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callOpenPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "callClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callLiquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callOpenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export class MockReentrantSwapRouter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockReentrantSwapRouterInterface;

  functions: {
    callClosePosition(overrides?: Overrides): Promise<ContractTransaction>;

    "callClosePosition()"(overrides?: Overrides): Promise<ContractTransaction>;

    callLiquidatePosition(overrides?: Overrides): Promise<ContractTransaction>;

    "callLiquidatePosition()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    callOpenPosition(overrides?: Overrides): Promise<ContractTransaction>;

    "callOpenPosition()"(overrides?: Overrides): Promise<ContractTransaction>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  callClosePosition(overrides?: Overrides): Promise<ContractTransaction>;

  "callClosePosition()"(overrides?: Overrides): Promise<ContractTransaction>;

  callLiquidatePosition(overrides?: Overrides): Promise<ContractTransaction>;

  "callLiquidatePosition()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callOpenPosition(overrides?: Overrides): Promise<ContractTransaction>;

  "callOpenPosition()"(overrides?: Overrides): Promise<ContractTransaction>;

  getAmountsOut(
    amountIn: BigNumberish,
    path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getAmountsOut(uint256,address[])"(
    amountIn: BigNumberish,
    path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensSupportingFeeOnTransferTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    callClosePosition(overrides?: CallOverrides): Promise<void>;

    "callClosePosition()"(overrides?: CallOverrides): Promise<void>;

    callLiquidatePosition(overrides?: CallOverrides): Promise<void>;

    "callLiquidatePosition()"(overrides?: CallOverrides): Promise<void>;

    callOpenPosition(overrides?: CallOverrides): Promise<void>;

    "callOpenPosition()"(overrides?: CallOverrides): Promise<void>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    callClosePosition(overrides?: Overrides): Promise<BigNumber>;

    "callClosePosition()"(overrides?: Overrides): Promise<BigNumber>;

    callLiquidatePosition(overrides?: Overrides): Promise<BigNumber>;

    "callLiquidatePosition()"(overrides?: Overrides): Promise<BigNumber>;

    callOpenPosition(overrides?: Overrides): Promise<BigNumber>;

    "callOpenPosition()"(overrides?: Overrides): Promise<BigNumber>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    callClosePosition(overrides?: Overrides): Promise<PopulatedTransaction>;

    "callClosePosition()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    callLiquidatePosition(overrides?: Overrides): Promise<PopulatedTransaction>;

    "callLiquidatePosition()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    callOpenPosition(overrides?: Overrides): Promise<PopulatedTransaction>;

    "callOpenPosition()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
