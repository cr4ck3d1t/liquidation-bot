/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PairInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calculateBalance(address,uint256)": FunctionFragment;
    "calculateOpenPosition(uint256,uint256)": FunctionFragment;
    "closePosition(address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getDeposit(address)": FunctionFragment;
    "getLoan(address)": FunctionFragment;
    "getPosition(address)": FunctionFragment;
    "getTotalDeposit()": FunctionFragment;
    "getTotalLoan()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address,string,string)": FunctionFragment;
    "liquidatePosition(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "openPosition(address,uint256,uint256)": FunctionFragment;
    "positionCosts(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOpenPosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getDeposit", values: [string]): string;
  encodeFunctionData(functionFragment: "getLoan", values: [string]): string;
  encodeFunctionData(functionFragment: "getPosition", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalLoan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positionCosts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOpenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionCosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ChangedPosition(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Liquidated(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Pair extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PairInterface;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateBalance(
      trader: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        profit: BigNumber;
        debtPayable: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    "calculateBalance(address,uint256)"(
      trader: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        profit: BigNumber;
        debtPayable: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    calculateOpenPosition(
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        maxAmountIn: BigNumber;
        borrowAmount: BigNumber;
        borrowRate: BigNumber;
        liquidationCost: BigNumber;
      }
    >;

    "calculateOpenPosition(uint256,uint256)"(
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        maxAmountIn: BigNumber;
        borrowAmount: BigNumber;
        borrowRate: BigNumber;
        liquidationCost: BigNumber;
      }
    >;

    closePosition(
      trader: string,
      amountOutMin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closePosition(address,uint256)"(
      trader: string,
      amountOutMin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDeposit(trader: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDeposit(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLoan(trader: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLoan(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPosition(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          amount: BigNumber;
          value: BigNumber;
          selfValue: BigNumber;
          principalDebt: BigNumber;
          currentDebt: BigNumber;
          rate: BigNumber;
          currentCost: BigNumber;
          liquidationCost: BigNumber;
        }
      ] & {
        position: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          amount: BigNumber;
          value: BigNumber;
          selfValue: BigNumber;
          principalDebt: BigNumber;
          currentDebt: BigNumber;
          rate: BigNumber;
          currentCost: BigNumber;
          liquidationCost: BigNumber;
        };
      }
    >;

    "getPosition(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          amount: BigNumber;
          value: BigNumber;
          selfValue: BigNumber;
          principalDebt: BigNumber;
          currentDebt: BigNumber;
          rate: BigNumber;
          currentCost: BigNumber;
          liquidationCost: BigNumber;
        }
      ] & {
        position: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          amount: BigNumber;
          value: BigNumber;
          selfValue: BigNumber;
          principalDebt: BigNumber;
          currentDebt: BigNumber;
          rate: BigNumber;
          currentCost: BigNumber;
          liquidationCost: BigNumber;
        };
      }
    >;

    getTotalDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalDeposit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalLoan(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalLoan()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      reserve: string,
      pancakePair: string,
      pancakeRouter: string,
      paramProvider: string,
      treasurer: string,
      lendable: string,
      tradable: string,
      wow: string,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address,address,address,address,string,string)"(
      reserve: string,
      pancakePair: string,
      pancakeRouter: string,
      paramProvider: string,
      treasurer: string,
      lendable: string,
      tradable: string,
      wow: string,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidatePosition(
      trader: string,
      liquidator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidatePosition(address,address)"(
      trader: string,
      liquidator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    openPosition(
      trader: string,
      leverageFactor: BigNumberish,
      amountOutMin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "openPosition(address,uint256,uint256)"(
      trader: string,
      leverageFactor: BigNumberish,
      amountOutMin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    positionCosts(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentCost: BigNumber;
        liquidationCost: BigNumber;
      }
    >;

    "positionCosts(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentCost: BigNumber;
        liquidationCost: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateBalance(
    trader: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      profit: BigNumber;
      debtPayable: BigNumber;
      protocolFee: BigNumber;
    }
  >;

  "calculateBalance(address,uint256)"(
    trader: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      profit: BigNumber;
      debtPayable: BigNumber;
      protocolFee: BigNumber;
    }
  >;

  calculateOpenPosition(
    amount: BigNumberish,
    leverageFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      maxAmountIn: BigNumber;
      borrowAmount: BigNumber;
      borrowRate: BigNumber;
      liquidationCost: BigNumber;
    }
  >;

  "calculateOpenPosition(uint256,uint256)"(
    amount: BigNumberish,
    leverageFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      maxAmountIn: BigNumber;
      borrowAmount: BigNumber;
      borrowRate: BigNumber;
      liquidationCost: BigNumber;
    }
  >;

  closePosition(
    trader: string,
    amountOutMin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closePosition(address,uint256)"(
    trader: string,
    amountOutMin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDeposit(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getDeposit(address)"(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoan(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getLoan(address)"(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPosition(
    trader: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      amount: BigNumber;
      value: BigNumber;
      selfValue: BigNumber;
      principalDebt: BigNumber;
      currentDebt: BigNumber;
      rate: BigNumber;
      currentCost: BigNumber;
      liquidationCost: BigNumber;
    }
  >;

  "getPosition(address)"(
    trader: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      amount: BigNumber;
      value: BigNumber;
      selfValue: BigNumber;
      principalDebt: BigNumber;
      currentDebt: BigNumber;
      rate: BigNumber;
      currentCost: BigNumber;
      liquidationCost: BigNumber;
    }
  >;

  getTotalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalLoan(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalLoan()"(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    reserve: string,
    pancakePair: string,
    pancakeRouter: string,
    paramProvider: string,
    treasurer: string,
    lendable: string,
    tradable: string,
    wow: string,
    name: string,
    symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address,address,address,address,string,string)"(
    reserve: string,
    pancakePair: string,
    pancakeRouter: string,
    paramProvider: string,
    treasurer: string,
    lendable: string,
    tradable: string,
    wow: string,
    name: string,
    symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidatePosition(
    trader: string,
    liquidator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidatePosition(address,address)"(
    trader: string,
    liquidator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  openPosition(
    trader: string,
    leverageFactor: BigNumberish,
    amountOutMin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "openPosition(address,uint256,uint256)"(
    trader: string,
    leverageFactor: BigNumberish,
    amountOutMin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  positionCosts(
    trader: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      currentCost: BigNumber;
      liquidationCost: BigNumber;
    }
  >;

  "positionCosts(address)"(
    trader: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      currentCost: BigNumber;
      liquidationCost: BigNumber;
    }
  >;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateBalance(
      trader: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        profit: BigNumber;
        debtPayable: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    "calculateBalance(address,uint256)"(
      trader: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        profit: BigNumber;
        debtPayable: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    calculateOpenPosition(
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        maxAmountIn: BigNumber;
        borrowAmount: BigNumber;
        borrowRate: BigNumber;
        liquidationCost: BigNumber;
      }
    >;

    "calculateOpenPosition(uint256,uint256)"(
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        maxAmountIn: BigNumber;
        borrowAmount: BigNumber;
        borrowRate: BigNumber;
        liquidationCost: BigNumber;
      }
    >;

    closePosition(
      trader: string,
      amountOutMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "closePosition(address,uint256)"(
      trader: string,
      amountOutMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDeposit(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getDeposit(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoan(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getLoan(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        value: BigNumber;
        selfValue: BigNumber;
        principalDebt: BigNumber;
        currentDebt: BigNumber;
        rate: BigNumber;
        currentCost: BigNumber;
        liquidationCost: BigNumber;
      }
    >;

    "getPosition(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        value: BigNumber;
        selfValue: BigNumber;
        principalDebt: BigNumber;
        currentDebt: BigNumber;
        rate: BigNumber;
        currentCost: BigNumber;
        liquidationCost: BigNumber;
      }
    >;

    getTotalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalLoan(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalLoan()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      reserve: string,
      pancakePair: string,
      pancakeRouter: string,
      paramProvider: string,
      treasurer: string,
      lendable: string,
      tradable: string,
      wow: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address,address,address,address,string,string)"(
      reserve: string,
      pancakePair: string,
      pancakeRouter: string,
      paramProvider: string,
      treasurer: string,
      lendable: string,
      tradable: string,
      wow: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatePosition(
      trader: string,
      liquidator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "liquidatePosition(address,address)"(
      trader: string,
      liquidator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    openPosition(
      trader: string,
      leverageFactor: BigNumberish,
      amountOutMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openPosition(address,uint256,uint256)"(
      trader: string,
      leverageFactor: BigNumberish,
      amountOutMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionCosts(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentCost: BigNumber;
        liquidationCost: BigNumber;
      }
    >;

    "positionCosts(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentCost: BigNumber;
        liquidationCost: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    ChangedPosition(
      trader: string | null,
      amount: null,
      loan: null,
      cost: null,
      liquidationCost: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        trader: string;
        amount: BigNumber;
        loan: BigNumber;
        cost: BigNumber;
        liquidationCost: BigNumber;
      }
    >;

    Liquidated(
      trader: string | null,
      amount: null,
      loanPaid: null,
      cost: null,
      liquidationCost: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        trader: string;
        amount: BigNumber;
        loanPaid: BigNumber;
        cost: BigNumber;
        liquidationCost: BigNumber;
      }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateBalance(
      trader: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateBalance(address,uint256)"(
      trader: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateOpenPosition(
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateOpenPosition(uint256,uint256)"(
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      trader: string,
      amountOutMin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "closePosition(address,uint256)"(
      trader: string,
      amountOutMin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDeposit(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getDeposit(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoan(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getLoan(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getPosition(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalLoan(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalLoan()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      reserve: string,
      pancakePair: string,
      pancakeRouter: string,
      paramProvider: string,
      treasurer: string,
      lendable: string,
      tradable: string,
      wow: string,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address,address,address,address,string,string)"(
      reserve: string,
      pancakePair: string,
      pancakeRouter: string,
      paramProvider: string,
      treasurer: string,
      lendable: string,
      tradable: string,
      wow: string,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidatePosition(
      trader: string,
      liquidator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidatePosition(address,address)"(
      trader: string,
      liquidator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    openPosition(
      trader: string,
      leverageFactor: BigNumberish,
      amountOutMin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "openPosition(address,uint256,uint256)"(
      trader: string,
      leverageFactor: BigNumberish,
      amountOutMin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    positionCosts(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "positionCosts(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateBalance(
      trader: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateBalance(address,uint256)"(
      trader: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateOpenPosition(
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateOpenPosition(uint256,uint256)"(
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePosition(
      trader: string,
      amountOutMin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closePosition(address,uint256)"(
      trader: string,
      amountOutMin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDeposit(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeposit(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoan(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLoan(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPosition(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalDeposit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalLoan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalLoan()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      reserve: string,
      pancakePair: string,
      pancakeRouter: string,
      paramProvider: string,
      treasurer: string,
      lendable: string,
      tradable: string,
      wow: string,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address,address,address,address,string,string)"(
      reserve: string,
      pancakePair: string,
      pancakeRouter: string,
      paramProvider: string,
      treasurer: string,
      lendable: string,
      tradable: string,
      wow: string,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      trader: string,
      liquidator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidatePosition(address,address)"(
      trader: string,
      liquidator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPosition(
      trader: string,
      leverageFactor: BigNumberish,
      amountOutMin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "openPosition(address,uint256,uint256)"(
      trader: string,
      leverageFactor: BigNumberish,
      amountOutMin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    positionCosts(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positionCosts(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
