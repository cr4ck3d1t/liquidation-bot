/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockInterestStrategy } from "../MockInterestStrategy";

export class MockInterestStrategy__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    baseBorrowRate: BigNumberish,
    optimalSlope: BigNumberish,
    excessSlope: BigNumberish,
    optimalUtilization: BigNumberish,
    treasureFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<MockInterestStrategy> {
    return super.deploy(
      baseBorrowRate,
      optimalSlope,
      excessSlope,
      optimalUtilization,
      treasureFactor,
      overrides || {}
    ) as Promise<MockInterestStrategy>;
  }
  getDeployTransaction(
    baseBorrowRate: BigNumberish,
    optimalSlope: BigNumberish,
    excessSlope: BigNumberish,
    optimalUtilization: BigNumberish,
    treasureFactor: BigNumberish,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      baseBorrowRate,
      optimalSlope,
      excessSlope,
      optimalUtilization,
      treasureFactor,
      overrides || {}
    );
  }
  attach(address: string): MockInterestStrategy {
    return super.attach(address) as MockInterestStrategy;
  }
  connect(signer: Signer): MockInterestStrategy__factory {
    return super.connect(signer) as MockInterestStrategy__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockInterestStrategy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockInterestStrategy;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseBorrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optimalSlope",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "excessSlope",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optimalUtilization",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "treasureFactor",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "utilization",
        type: "uint256",
      },
    ],
    name: "borrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "avgBorrowRate",
        type: "uint256",
      },
    ],
    name: "calculateInterestRates",
    outputs: [
      {
        internalType: "uint256",
        name: "liqRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "overallRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "utilization",
        type: "uint256",
      },
    ],
    name: "liquidityRate",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "avgRate",
        type: "uint256",
      },
    ],
    name: "overallBorrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseBorrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optimalSlope",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "excessSlope",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optimalUtilization",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "treasureFactor",
        type: "uint256",
      },
    ],
    name: "setConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    name: "utilizationRate",
    outputs: [
      {
        internalType: "uint256",
        name: "utilization",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161090e38038061090e833981810160405260a081101561003357600080fd5b508051602080830151604080850151606080870151608097880151845160a08101865288815296870186905293860183905290850181905293909501819052600093909355600155600292909255600391909155600455610875806100996000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063124fded4146100675780633f7209221461009657806356ed18ea146100cd57806378b51737146100f0578063ec2de40c14610113578063f66b694414610136575b600080fd5b6100846004803603602081101561007d57600080fd5b5035610178565b60408051918252519081900360200190f35b6100cb600480360360a08110156100ac57600080fd5b5080359060208101359060408101359060608101359060800135610192565b005b610084600480360360408110156100e357600080fd5b50803590602001356101d0565b6100846004803603604081101561010657600080fd5b50803590602001356101e3565b6100846004803603604081101561012957600080fd5b50803590602001356101f9565b61015f6004803603606081101561014c57600080fd5b5080359060208101359060400135610205565b6040805192835260208301919091528051918290030190f35b600061018c8261018661022a565b90610267565b92915050565b6040805160a0810182528681526020810186905290810184905260608101839052608001819052600094909455600192909255600255600355600455565b60006101dc8383610310565b9392505050565b60006101dc83836101f261022a565b9190610346565b60006101dc838361037c565b60008061021e85858561021661022a565b9291906103a6565b90969095509350505050565b610232610810565b506040805160a08101825260005481526001546020820152600254918101919091526003546060820152600454608082015290565b600082606001518211156102e05760006102a6610290856060015161028a6103e4565b906103f4565b60608601516102a09086906103f4565b90610436565b90506102d86102c282866040015161057d90919063ffffffff16565b602086015186516102d29161063f565b9061063f565b91505061018c565b6101dc6103086102fd85606001518561043690919063ffffffff16565b60208601519061057d565b84519061063f565b6000821561018c57600061032384610699565b90506000610331828561057d565b905061033d8183610436565b95945050505050565b600061037461036485608001516127106103f490919063ffffffff16565b61036e858561057d565b90610718565b949350505050565b6000821561039d57610398610391838561063f565b8490610436565b6101dc565b60009392505050565b60008060006103b5868661037c565b90506103cc6103c48786610310565b889083610346565b92506103d88782610267565b91505094509492505050565b6b033b2e3c9fd0803ce800000090565b60006101dc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506107b6565b60408051808201909152600381526226a22d60e91b6020820152600090826104dc5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104a1578181015183820152602001610489565b50505050905090810190601f1680156104ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506040805180820190915260038152624d4d4f60e81b602082015260028304906b033b2e3c9fd0803ce800000082190485111561055a5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156104a1578181015183820152602001610489565b5082816b033b2e3c9fd0803ce80000008602018161057457fe5b04949350505050565b600082158061058a575081155b156105975750600061018c565b816b019d971e4fe8401e7400000019816105ad57fe5b04831115604051806040016040528060038152602001624d4d4f60e81b815250906106195760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156104a1578181015183820152602001610489565b506b033b2e3c9fd0803ce80000006002815b04838502018161063757fe5b049392505050565b6000828201838110156101dc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000633b9aca00828102908390820414604051806040016040528060038152602001624d4d4f60e81b815250906107115760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156104a1578181015183820152602001610489565b5092915050565b6000821580610725575081155b156107325750600061018c565b81611388198161073e57fe5b04831115604051806040016040528060038152602001624d4d4f60e81b815250906107aa5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156104a1578181015183820152602001610489565b5061271060028161062b565b600081848411156108085760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156104a1578181015183820152602001610489565b505050900390565b6040518060a001604052806000815260200160008152602001600081526020016000815260200160008152509056fea264697066735822122020968f0453e3ef5b2b6ec4a56fcaf6da3b8718017270cc1b35851027a1cca93764736f6c63430007040033";
