/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockChainlinkPriceGuard } from "../MockChainlinkPriceGuard";

export class MockChainlinkPriceGuard__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    feed: string,
    decimalRatio: BigNumberish,
    lowerDecimals: boolean,
    flipped: boolean,
    overrides?: Overrides
  ): Promise<MockChainlinkPriceGuard> {
    return super.deploy(
      feed,
      decimalRatio,
      lowerDecimals,
      flipped,
      overrides || {}
    ) as Promise<MockChainlinkPriceGuard>;
  }
  getDeployTransaction(
    feed: string,
    decimalRatio: BigNumberish,
    lowerDecimals: boolean,
    flipped: boolean,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      feed,
      decimalRatio,
      lowerDecimals,
      flipped,
      overrides || {}
    );
  }
  attach(address: string): MockChainlinkPriceGuard {
    return super.attach(address) as MockChainlinkPriceGuard;
  }
  connect(signer: Signer): MockChainlinkPriceGuard__factory {
    return super.connect(signer) as MockChainlinkPriceGuard__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockChainlinkPriceGuard {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockChainlinkPriceGuard;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "feed",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "decimalRatio",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "lowerDecimals",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "flipped",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "getAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "getThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "price",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
    ],
    name: "setRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106a53803806106a58339818101604052608081101561003357600080fd5b50805160208201516040830151606090930151600080546001600160a01b039094166001600160a01b031990941693909317909255600155600280549115156101000261ff001993151560ff1990931692909217929092161790556106088061009d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806312848e28146100515780635c1952171461009857806398d5fdca146100c7578063c6414eee146100cf575b600080fd5b610096600480360360a081101561006757600080fd5b5069ffffffffffffffffffff8135811691602081013590911690604081013590606081013590608001356100f2565b005b6100b5600480360360208110156100ae57600080fd5b503561016b565b60408051918252519081900360200190f35b6100b56101b0565b6100b5600480360360408110156100e557600080fd5b50803590602001356101b6565b6040805160a08101825269ffffffffffffffffffff96871680825295909616602087018190529086018490526060860183905260809095018190526003805469ffffffffffffffffffff191690941769ffffffffffffffffffff60501b1916600160501b90950294909417909255600455600555600655565b60008061017e6101796101b0565b6101fd565b600254909150610100900460ff1661019f5761019a8382610223565b6101a9565b6101a98382610313565b9392505050565b60045490565b6000806101c28461016b565b90508281106101f0576101eb816101e56127106101df8388610415565b90610457565b906104b0565b6101f3565b60005b9150505b92915050565b60025460009060ff1661021b57600154828161021557fe5b046101f7565b506001540290565b6000821580610230575081155b1561023d575060006101f7565b816706f05b59d3b20000198161024f57fe5b04831115604051806040016040528060038152602001624d4d4f60e81b815250906102f85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156102bd5781810151838201526020016102a5565b50505050905090810190601f1680156102ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050670de0b6b3a764000091026706f05b59d3b20000010490565b60408051808201909152600381526226a22d60e91b60208201526000908261037c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102bd5781810151838201526020016102a5565b506040805180820190915260038152624d4d4f60e81b60208201526002830490670de0b6b3a76400008219048511156103f65760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102bd5781810151838201526020016102a5565b508281670de0b6b3a76400008602018161040c57fe5b04949350505050565b60006101a983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506104f2565b600082610466575060006101f7565b8282028284828161047357fe5b04146101a95760405162461bcd60e51b81526004018080602001828103825260218152602001806105b26021913960400191505060405180910390fd5b60006101a983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061054c565b600081848411156105445760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102bd5781810151838201526020016102a5565b505050900390565b6000818361059b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102bd5781810151838201526020016102a5565b5060008385816105a757fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212205c6dedca651e3b1551d92f96e6895005c034a82a0ee7352efc4f8ac1310bb96964736f6c63430007040033";
