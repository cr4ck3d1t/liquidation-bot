/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockReentrantSwapRouter } from "../MockReentrantSwapRouter";

export class MockReentrantSwapRouter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _pancakeRouter: string,
    overrides?: Overrides
  ): Promise<MockReentrantSwapRouter> {
    return super.deploy(
      _pancakeRouter,
      overrides || {}
    ) as Promise<MockReentrantSwapRouter>;
  }
  getDeployTransaction(
    _pancakeRouter: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_pancakeRouter, overrides || {});
  }
  attach(address: string): MockReentrantSwapRouter {
    return super.attach(address) as MockReentrantSwapRouter;
  }
  connect(signer: Signer): MockReentrantSwapRouter__factory {
    return super.connect(signer) as MockReentrantSwapRouter__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockReentrantSwapRouter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockReentrantSwapRouter;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_pancakeRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "callClosePosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "callLiquidatePosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "callOpenPosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108fe3803806108fe8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610899806100656000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631af3088b1461005c578063480a66e8146100665780635c11d7951461006e5780637bcd31d9146100f9578063d06ca61f14610101575b600080fd5b6100646101c8565b005b6100646101df565b610064600480360360a081101561008457600080fd5b8135916020810135918101906060810160408201356401000000008111156100ab57600080fd5b8201836020820111156100bd57600080fd5b803590602001918460208302840111640100000000831117156100df57600080fd5b91935091506001600160a01b0381351690602001356101fa565b6100646106fb565b6101786004803603604081101561011757600080fd5b8135919081019060408101602082013564010000000081111561013957600080fd5b82018360208201111561014b57600080fd5b8035906020019184602083028401116401000000008311171561016d57600080fd5b509092509050610711565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101b457818101518382015260200161019c565b505050509050019250505060405180910390f35b6d21a627a9a2afa827a9a4aa24a7a760911b600155565b712624a8aaa4a220aa22afa827a9a4aa24a7a760711b600155565b60015433906c27a822a72fa827a9a4aa24a7a760991b14156102a957806001600160a01b031663c5654acc60008060006040518463ffffffff1660e01b815260040180846001600160a01b031681526020018381526020018281526020019350505050602060405180830381600087803b15801561027757600080fd5b505af115801561028b573d6000803e3d6000fd5b505050506040513d60208110156102a157600080fd5b506103c99050565b6001546d21a627a9a2afa827a9a4aa24a7a760911b141561031c57806001600160a01b031663742fe1f86000806040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561027757600080fd5b600154712624a8aaa4a220aa22afa827a9a4aa24a7a760711b14156103c957806001600160a01b031663586e848f6000806040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050602060405180830381600087803b15801561039c57600080fd5b505af11580156103b0573d6000803e3d6000fd5b505050506040513d60208110156103c657600080fd5b50505b848460008181106103d657fe5b604080516323b872dd60e01b8152336004820152306024820152604481018c90529051602092830294909401356001600160a01b0316936323b872dd9350606480830193928290030181600087803b15801561043157600080fd5b505af1158015610445573d6000803e3d6000fd5b505050506040513d602081101561045b57600080fd5b508590508460008161046957fe5b600080546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018e90529051602094850296909601359091169463095ea7b394506044808301949391928390030190829087803b1580156104c857600080fd5b505af11580156104dc573d6000803e3d6000fd5b505050506040513d60208110156104f257600080fd5b5050600054604051635c11d79560e01b815260048101898152602482018990526001600160a01b0386811660648401526084830186905260a06044840190815260a48401899052931692635c11d795928b928b928b928b928b928b9260c401866020870280828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b15801561059457600080fd5b505af11580156105a8573d6000803e3d6000fd5b508792508691505060001981018181106105be57fe5b905060200201356001600160a01b03166001600160a01b031663a9059cbb33878760018a8a9050038181106105ef57fe5b905060200201356001600160a01b03166001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561064b57600080fd5b505afa15801561065f573d6000803e3d6000fd5b505050506040513d602081101561067557600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b505050506040513d60208110156106f057600080fd5b505050505050505050565b6c27a822a72fa827a9a4aa24a7a760991b600155565b6000546040805163d06ca61f60e01b81526004810186815260248201928352604482018590526060936001600160a01b03169263d06ca61f92889288928892606401846020850280828437600081840152601f19601f82011690508083019250505094505050505060006040518083038186803b15801561079157600080fd5b505afa1580156107a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156107ce57600080fd5b81019080805160405193929190846401000000008211156107ee57600080fd5b90830190602082018581111561080357600080fd5b825186602082028301116401000000008211171561082057600080fd5b82525081516020918201928201910280838360005b8381101561084d578181015183820152602001610835565b505050509050016040525050509050939250505056fea264697066735822122006b7829cc99c367d3199a26905ff811ae635927f40853160a5521853228f819364736f6c63430007040033";
