/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockChainlinkPriceFeed } from "../MockChainlinkPriceFeed";

export class MockChainlinkPriceFeed__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    decimalRatio: BigNumberish,
    lowerDecimals: boolean,
    overrides?: Overrides
  ): Promise<MockChainlinkPriceFeed> {
    return super.deploy(
      decimalRatio,
      lowerDecimals,
      overrides || {}
    ) as Promise<MockChainlinkPriceFeed>;
  }
  getDeployTransaction(
    decimalRatio: BigNumberish,
    lowerDecimals: boolean,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      decimalRatio,
      lowerDecimals,
      overrides || {}
    );
  }
  attach(address: string): MockChainlinkPriceFeed {
    return super.attach(address) as MockChainlinkPriceFeed;
  }
  connect(signer: Signer): MockChainlinkPriceFeed__factory {
    return super.connect(signer) as MockChainlinkPriceFeed__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockChainlinkPriceFeed {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockChainlinkPriceFeed;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "decimalRatio",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "lowerDecimals",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "REVISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "sell",
        type: "bool",
      },
    ],
    name: "getAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "sell",
        type: "bool",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "price",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
    ],
    name: "setRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105d73803806105d78339818101604052604081101561003357600080fd5b50805160209091015160009182556001805460ff191691151591909117610100600160a81b031916306101000217905561056490819061007390396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806311106ee21461006757806312848e281461009e5780639a6fc8f5146100e2578063dde43cba1461014c578063e245b5af14610154578063feaf968c14610173575b600080fd5b61008c6004803603604081101561007d57600080fd5b5080359060200135151561017b565b60408051918252519081900360200190f35b6100e0600480360360a08110156100b457600080fd5b506001600160501b0381358116916020810135909116906040810135906060810135906080013561019b565b005b610108600480360360208110156100f857600080fd5b50356001600160501b0316610211565b60405180866001600160501b03168152602001858152602001848152602001838152602001826001600160501b031681526020019550505050505060405180910390f35b61008c61023a565b61008c6004803603602081101561016a57600080fd5b5035151561023f565b6101086102ea565b6000806101878361023f565b90506101938482610311565b949350505050565b6040805160a0810182526001600160501b0396871680825295909616602087018190529086018490526060860183905260809095018190526002805469ffffffffffffffffffff191690941769ffffffffffffffffffff60501b1916600160501b90950294909417909255600355600455600555565b6002546003546004546005546001600160501b0380851694600160501b90041691939590929450565b601181565b60008060018054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561028e57600080fd5b505afa1580156102a2573d6000803e3d6000fd5b505050506040513d60a08110156102b857600080fd5b506020015190506102c881610406565b9150826102e4576102e1670de0b6b3a76400008361042c565b91505b50919050565b6002546003546004546005546001600160501b0380851694600160501b9004169091929394565b600082158061031e575081155b1561032b57506000610400565b816706f05b59d3b20000198161033d57fe5b04831115604051806040016040528060038152602001624d4d4f60e81b815250906103e65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156103ab578181015183820152602001610393565b50505050905090810190601f1680156103d85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050670de0b6b3a76400006706f05b59d3b2000082840201045b92915050565b60015460009060ff1661042457600054828161041e57fe5b04610400565b506000540290565b60408051808201909152600381526226a22d60e91b6020820152600090826104955760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156103ab578181015183820152602001610393565b506040805180820190915260038152624d4d4f60e81b60208201526002830490670de0b6b3a764000082190485111561050f5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156103ab578181015183820152602001610393565b508281670de0b6b3a76400008602018161052557fe5b0494935050505056fea26469706673582212203eacd406418361e217d968f67def24a0f6a6ec358e30572429c16d69778ff5bf64736f6c63430007040033";
