/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockDiaPriceFeed } from "../MockDiaPriceFeed";

export class MockDiaPriceFeed__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    decimalRatio: BigNumberish,
    lowerDecimals: boolean,
    overrides?: Overrides
  ): Promise<MockDiaPriceFeed> {
    return super.deploy(
      decimalRatio,
      lowerDecimals,
      overrides || {}
    ) as Promise<MockDiaPriceFeed>;
  }
  getDeployTransaction(
    decimalRatio: BigNumberish,
    lowerDecimals: boolean,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      decimalRatio,
      lowerDecimals,
      overrides || {}
    );
  }
  attach(address: string): MockDiaPriceFeed {
    return super.attach(address) as MockDiaPriceFeed;
  }
  connect(signer: Signer): MockDiaPriceFeed__factory {
    return super.connect(signer) as MockDiaPriceFeed__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockDiaPriceFeed {
    return new Contract(address, _abi, signerOrProvider) as MockDiaPriceFeed;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "decimalRatio",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "lowerDecimals",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "sell",
        type: "bool",
      },
    ],
    name: "getAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "sell",
        type: "bool",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "getValue",
    outputs: [
      {
        internalType: "uint128",
        name: "price",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "updatedAt",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "uint128",
        name: "value",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "timestamp",
        type: "uint128",
      },
    ],
    name: "setValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107663803806107668339818101604052604081101561003357600080fd5b508051602091820151604080518082019091526008808252674d4f434b5f4b455960c01b948201948552600080546001600160a01b0319163090811790915593949293928591859161008891600191906100aa565b506002919091556003805460ff19169115159190911790555061014b92505050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826100e05760008555610126565b82601f106100f957805160ff1916838001178555610126565b82800160010185558215610126579182015b8281111561012657825182559160200191906001019061010b565b50610132929150610136565b5090565b5b808211156101325760008155600101610137565b61060c8061015a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806311106ee2146100515780637898e0c214610088578063960384a014610146578063e245b5af1461021b575b600080fd5b6100766004803603604081101561006757600080fd5b5080359060200135151561023a565b60408051918252519081900360200190f35b6101446004803603606081101561009e57600080fd5b8101906020810181356401000000008111156100b957600080fd5b8201836020820111156100cb57600080fd5b803590602001918460018302840111640100000000831117156100ed57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160801b03833581169450602090930135909216915061025a9050565b005b6101ec6004803603602081101561015c57600080fd5b81019060208101813564010000000081111561017757600080fd5b82018360208201111561018957600080fd5b803590602001918460018302840111640100000000831117156101ab57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610283945050505050565b60405180836001600160801b03168152602001826001600160801b031681526020019250505060405180910390f35b6100766004803603602081101561023157600080fd5b5035151561029b565b6000806102468361029b565b905061025284826103b9565b949350505050565b6001600160801b031660809190911b6fffffffffffffffffffffffffffffffff19160160045550565b50600454608081901c916001600160801b0390911690565b600080546040516304b01c2560e51b8152602060048201908152600180546002600019828416156101000201909116046024840181905285946001600160a01b03169363960384a093918291604401908490801561033a5780601f1061030f5761010080835404028352916020019161033a565b820191906000526020600020905b81548152906001019060200180831161031d57829003601f168201915b505092505050604080518083038186803b15801561035757600080fd5b505afa15801561036b573d6000803e3d6000fd5b505050506040513d604081101561038157600080fd5b505190506103976001600160801b0382166104ae565b9150826103b3576103b0670de0b6b3a7640000836104d4565b91505b50919050565b60008215806103c6575081155b156103d3575060006104a8565b816706f05b59d3b2000019816103e557fe5b04831115604051806040016040528060038152602001624d4d4f60e81b8152509061048e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561045357818101518382015260200161043b565b50505050905090810190601f1680156104805780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050670de0b6b3a76400006706f05b59d3b2000082840201045b92915050565b60035460009060ff166104cc5760025482816104c657fe5b046104a8565b506002540290565b60408051808201909152600381526226a22d60e91b60208201526000908261053d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561045357818101518382015260200161043b565b506040805180820190915260038152624d4d4f60e81b60208201526002830490670de0b6b3a76400008219048511156105b75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561045357818101518382015260200161043b565b508281670de0b6b3a7640000860201816105cd57fe5b0494935050505056fea26469706673582212201757d26f56dead97d062d515bb2c7529f2ff1b5b7ce890ed1b45a350844a55f864736f6c63430007040033";
