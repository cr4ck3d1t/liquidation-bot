/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ParamProviderInterface extends ethers.utils.Interface {
  functions: {
    "ACCURACY_DIVISOR()": FunctionFragment;
    "FEE_TOKEN()": FunctionFragment;
    "REVISION()": FunctionFragment;
    "WOW()": FunctionFragment;
    "baseBorrowRate()": FunctionFragment;
    "excessSlope()": FunctionFragment;
    "feeToken()": FunctionFragment;
    "initialize(address,address,uint256,uint256)": FunctionFragment;
    "liquidationMargin()": FunctionFragment;
    "liquidationReward()": FunctionFragment;
    "maxLeverageFactor()": FunctionFragment;
    "maxLiquidationReward()": FunctionFragment;
    "maxPriceThreshold()": FunctionFragment;
    "maxRateMultiplier()": FunctionFragment;
    "minPositionDeposit()": FunctionFragment;
    "minWOWBalance(uint256)": FunctionFragment;
    "optimalSlope()": FunctionFragment;
    "optimalUtilization()": FunctionFragment;
    "overrideAddress(bytes32,address)": FunctionFragment;
    "overrideParam(bytes32,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paramGovernance()": FunctionFragment;
    "poolUtilizationAllowance()": FunctionFragment;
    "priceGuard()": FunctionFragment;
    "referralFirstBonus()": FunctionFragment;
    "referralProgram()": FunctionFragment;
    "referralSecondBonus()": FunctionFragment;
    "referralThirdBonus()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reset(bytes32)": FunctionFragment;
    "setMaxLeverageFactor(uint256)": FunctionFragment;
    "setParamGovernance(address)": FunctionFragment;
    "setPriceGuard(address)": FunctionFragment;
    "setSwapRouter(address)": FunctionFragment;
    "setTokenConverter(address)": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "tokenConverter()": FunctionFragment;
    "traderProfitFee()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasureFactor()": FunctionFragment;
    "treasurer()": FunctionFragment;
    "upgrade()": FunctionFragment;
    "xWOW()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ACCURACY_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FEE_TOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "REVISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "WOW", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excessSlope",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLeverageFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidationReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRateMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minWOWBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optimalSlope",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimalUtilization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "overrideAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "overrideParam",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paramGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolUtilizationAllowance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceGuard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralFirstBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralProgram",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralSecondBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralThirdBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reset", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setMaxLeverageFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParamGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceGuard",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConverter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenConverter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traderProfitFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasureFactor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasurer", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgrade", values?: undefined): string;
  encodeFunctionData(functionFragment: "xWOW", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ACCURACY_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FEE_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "REVISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WOW", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excessSlope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLeverageFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minWOWBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimalSlope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimalUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overrideAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overrideParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paramGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolUtilizationAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceGuard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralFirstBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralProgram",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralSecondBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralThirdBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLeverageFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParamGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConverter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenConverter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderProfitFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasureFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasurer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xWOW", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ParamProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ParamProviderInterface;

  functions: {
    ACCURACY_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ACCURACY_DIVISOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    FEE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    "FEE_TOKEN()"(overrides?: CallOverrides): Promise<[string]>;

    REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "REVISION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    WOW(overrides?: CallOverrides): Promise<[string]>;

    "WOW()"(overrides?: CallOverrides): Promise<[string]>;

    baseBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "baseBorrowRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    excessSlope(overrides?: CallOverrides): Promise<[BigNumber]>;

    "excessSlope()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    "feeToken()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      owner: string,
      paramGovernance: string,
      maxLiquidationReward: BigNumberish,
      minPositionDeposit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,uint256)"(
      owner: string,
      paramGovernance: string,
      maxLiquidationReward: BigNumberish,
      minPositionDeposit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidationMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidationMargin()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidationReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxLeverageFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLiquidationReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxLiquidationReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPriceThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxPriceThreshold()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRateMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxRateMultiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPositionDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minPositionDeposit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minWOWBalance(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "minWOWBalance(uint256)"(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    optimalSlope(overrides?: CallOverrides): Promise<[BigNumber]>;

    "optimalSlope()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    optimalUtilization(overrides?: CallOverrides): Promise<[BigNumber]>;

    "optimalUtilization()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    overrideAddress(
      name: BytesLike,
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "overrideAddress(bytes32,address)"(
      name: BytesLike,
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    overrideParam(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "overrideParam(bytes32,uint256)"(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    paramGovernance(overrides?: CallOverrides): Promise<[string]>;

    "paramGovernance()"(overrides?: CallOverrides): Promise<[string]>;

    poolUtilizationAllowance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolUtilizationAllowance()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceGuard(overrides?: CallOverrides): Promise<[string]>;

    "priceGuard()"(overrides?: CallOverrides): Promise<[string]>;

    referralFirstBonus(overrides?: CallOverrides): Promise<[BigNumber]>;

    "referralFirstBonus()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    referralProgram(overrides?: CallOverrides): Promise<[string]>;

    "referralProgram()"(overrides?: CallOverrides): Promise<[string]>;

    referralSecondBonus(overrides?: CallOverrides): Promise<[BigNumber]>;

    "referralSecondBonus()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    referralThirdBonus(overrides?: CallOverrides): Promise<[BigNumber]>;

    "referralThirdBonus()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    reset(name: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

    "reset(bytes32)"(
      name: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxLeverageFactor(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxLeverageFactor(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setParamGovernance(
      paramGovernance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setParamGovernance(address)"(
      paramGovernance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPriceGuard(
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPriceGuard(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSwapRouter(
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSwapRouter(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTokenConverter(
      tokenConverter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenConverter(address)"(
      tokenConverter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    "swapRouter()"(overrides?: CallOverrides): Promise<[string]>;

    tokenConverter(overrides?: CallOverrides): Promise<[string]>;

    "tokenConverter()"(overrides?: CallOverrides): Promise<[string]>;

    traderProfitFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "traderProfitFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    treasureFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "treasureFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasurer(overrides?: CallOverrides): Promise<[string]>;

    "treasurer()"(overrides?: CallOverrides): Promise<[string]>;

    upgrade(overrides?: Overrides): Promise<ContractTransaction>;

    "upgrade()"(overrides?: Overrides): Promise<ContractTransaction>;

    xWOW(overrides?: CallOverrides): Promise<[string]>;

    "xWOW()"(overrides?: CallOverrides): Promise<[string]>;
  };

  ACCURACY_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  "ACCURACY_DIVISOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  FEE_TOKEN(overrides?: CallOverrides): Promise<string>;

  "FEE_TOKEN()"(overrides?: CallOverrides): Promise<string>;

  REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  "REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

  WOW(overrides?: CallOverrides): Promise<string>;

  "WOW()"(overrides?: CallOverrides): Promise<string>;

  baseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  "baseBorrowRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  excessSlope(overrides?: CallOverrides): Promise<BigNumber>;

  "excessSlope()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  "feeToken()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    owner: string,
    paramGovernance: string,
    maxLiquidationReward: BigNumberish,
    minPositionDeposit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,uint256)"(
    owner: string,
    paramGovernance: string,
    maxLiquidationReward: BigNumberish,
    minPositionDeposit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidationMargin(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidationMargin()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidationReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxLeverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "maxLeverageFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxLiquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

  "maxLiquidationReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxPriceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "maxPriceThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxRateMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "maxRateMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  minPositionDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  "minPositionDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

  minWOWBalance(
    leverageFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "minWOWBalance(uint256)"(
    leverageFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  optimalSlope(overrides?: CallOverrides): Promise<BigNumber>;

  "optimalSlope()"(overrides?: CallOverrides): Promise<BigNumber>;

  optimalUtilization(overrides?: CallOverrides): Promise<BigNumber>;

  "optimalUtilization()"(overrides?: CallOverrides): Promise<BigNumber>;

  overrideAddress(
    name: BytesLike,
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "overrideAddress(bytes32,address)"(
    name: BytesLike,
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  overrideParam(
    name: BytesLike,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "overrideParam(bytes32,uint256)"(
    name: BytesLike,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paramGovernance(overrides?: CallOverrides): Promise<string>;

  "paramGovernance()"(overrides?: CallOverrides): Promise<string>;

  poolUtilizationAllowance(overrides?: CallOverrides): Promise<BigNumber>;

  "poolUtilizationAllowance()"(overrides?: CallOverrides): Promise<BigNumber>;

  priceGuard(overrides?: CallOverrides): Promise<string>;

  "priceGuard()"(overrides?: CallOverrides): Promise<string>;

  referralFirstBonus(overrides?: CallOverrides): Promise<BigNumber>;

  "referralFirstBonus()"(overrides?: CallOverrides): Promise<BigNumber>;

  referralProgram(overrides?: CallOverrides): Promise<string>;

  "referralProgram()"(overrides?: CallOverrides): Promise<string>;

  referralSecondBonus(overrides?: CallOverrides): Promise<BigNumber>;

  "referralSecondBonus()"(overrides?: CallOverrides): Promise<BigNumber>;

  referralThirdBonus(overrides?: CallOverrides): Promise<BigNumber>;

  "referralThirdBonus()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  reset(name: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

  "reset(bytes32)"(
    name: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxLeverageFactor(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxLeverageFactor(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setParamGovernance(
    paramGovernance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setParamGovernance(address)"(
    paramGovernance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPriceGuard(
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPriceGuard(address)"(
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSwapRouter(
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSwapRouter(address)"(
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTokenConverter(
    tokenConverter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenConverter(address)"(
    tokenConverter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  "swapRouter()"(overrides?: CallOverrides): Promise<string>;

  tokenConverter(overrides?: CallOverrides): Promise<string>;

  "tokenConverter()"(overrides?: CallOverrides): Promise<string>;

  traderProfitFee(overrides?: CallOverrides): Promise<BigNumber>;

  "traderProfitFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  treasureFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "treasureFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  treasurer(overrides?: CallOverrides): Promise<string>;

  "treasurer()"(overrides?: CallOverrides): Promise<string>;

  upgrade(overrides?: Overrides): Promise<ContractTransaction>;

  "upgrade()"(overrides?: Overrides): Promise<ContractTransaction>;

  xWOW(overrides?: CallOverrides): Promise<string>;

  "xWOW()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ACCURACY_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    "ACCURACY_DIVISOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_TOKEN(overrides?: CallOverrides): Promise<string>;

    "FEE_TOKEN()"(overrides?: CallOverrides): Promise<string>;

    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    WOW(overrides?: CallOverrides): Promise<string>;

    "WOW()"(overrides?: CallOverrides): Promise<string>;

    baseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "baseBorrowRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    excessSlope(overrides?: CallOverrides): Promise<BigNumber>;

    "excessSlope()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    "feeToken()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      owner: string,
      paramGovernance: string,
      maxLiquidationReward: BigNumberish,
      minPositionDeposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,uint256)"(
      owner: string,
      paramGovernance: string,
      maxLiquidationReward: BigNumberish,
      minPositionDeposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationMargin(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationMargin()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLeverageFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLiquidationReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPriceThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxRateMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "maxRateMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    minPositionDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "minPositionDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    minWOWBalance(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minWOWBalance(uint256)"(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optimalSlope(overrides?: CallOverrides): Promise<BigNumber>;

    "optimalSlope()"(overrides?: CallOverrides): Promise<BigNumber>;

    optimalUtilization(overrides?: CallOverrides): Promise<BigNumber>;

    "optimalUtilization()"(overrides?: CallOverrides): Promise<BigNumber>;

    overrideAddress(
      name: BytesLike,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "overrideAddress(bytes32,address)"(
      name: BytesLike,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    overrideParam(
      name: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "overrideParam(bytes32,uint256)"(
      name: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paramGovernance(overrides?: CallOverrides): Promise<string>;

    "paramGovernance()"(overrides?: CallOverrides): Promise<string>;

    poolUtilizationAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    "poolUtilizationAllowance()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceGuard(overrides?: CallOverrides): Promise<string>;

    "priceGuard()"(overrides?: CallOverrides): Promise<string>;

    referralFirstBonus(overrides?: CallOverrides): Promise<BigNumber>;

    "referralFirstBonus()"(overrides?: CallOverrides): Promise<BigNumber>;

    referralProgram(overrides?: CallOverrides): Promise<string>;

    "referralProgram()"(overrides?: CallOverrides): Promise<string>;

    referralSecondBonus(overrides?: CallOverrides): Promise<BigNumber>;

    "referralSecondBonus()"(overrides?: CallOverrides): Promise<BigNumber>;

    referralThirdBonus(overrides?: CallOverrides): Promise<BigNumber>;

    "referralThirdBonus()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    reset(name: BytesLike, overrides?: CallOverrides): Promise<void>;

    "reset(bytes32)"(name: BytesLike, overrides?: CallOverrides): Promise<void>;

    setMaxLeverageFactor(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxLeverageFactor(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setParamGovernance(
      paramGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setParamGovernance(address)"(
      paramGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceGuard(value: string, overrides?: CallOverrides): Promise<void>;

    "setPriceGuard(address)"(
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapRouter(value: string, overrides?: CallOverrides): Promise<void>;

    "setSwapRouter(address)"(
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenConverter(
      tokenConverter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenConverter(address)"(
      tokenConverter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    "swapRouter()"(overrides?: CallOverrides): Promise<string>;

    tokenConverter(overrides?: CallOverrides): Promise<string>;

    "tokenConverter()"(overrides?: CallOverrides): Promise<string>;

    traderProfitFee(overrides?: CallOverrides): Promise<BigNumber>;

    "traderProfitFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasureFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "treasureFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasurer(overrides?: CallOverrides): Promise<string>;

    "treasurer()"(overrides?: CallOverrides): Promise<string>;

    upgrade(overrides?: CallOverrides): Promise<void>;

    "upgrade()"(overrides?: CallOverrides): Promise<void>;

    xWOW(overrides?: CallOverrides): Promise<string>;

    "xWOW()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    ACCURACY_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    "ACCURACY_DIVISOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    "FEE_TOKEN()"(overrides?: CallOverrides): Promise<BigNumber>;

    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    WOW(overrides?: CallOverrides): Promise<BigNumber>;

    "WOW()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "baseBorrowRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    excessSlope(overrides?: CallOverrides): Promise<BigNumber>;

    "excessSlope()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    "feeToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      owner: string,
      paramGovernance: string,
      maxLiquidationReward: BigNumberish,
      minPositionDeposit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,uint256)"(
      owner: string,
      paramGovernance: string,
      maxLiquidationReward: BigNumberish,
      minPositionDeposit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidationMargin(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationMargin()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLeverageFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLiquidationReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPriceThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxRateMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "maxRateMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    minPositionDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "minPositionDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    minWOWBalance(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minWOWBalance(uint256)"(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optimalSlope(overrides?: CallOverrides): Promise<BigNumber>;

    "optimalSlope()"(overrides?: CallOverrides): Promise<BigNumber>;

    optimalUtilization(overrides?: CallOverrides): Promise<BigNumber>;

    "optimalUtilization()"(overrides?: CallOverrides): Promise<BigNumber>;

    overrideAddress(
      name: BytesLike,
      value: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "overrideAddress(bytes32,address)"(
      name: BytesLike,
      value: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    overrideParam(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "overrideParam(bytes32,uint256)"(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    "paramGovernance()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolUtilizationAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    "poolUtilizationAllowance()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceGuard(overrides?: CallOverrides): Promise<BigNumber>;

    "priceGuard()"(overrides?: CallOverrides): Promise<BigNumber>;

    referralFirstBonus(overrides?: CallOverrides): Promise<BigNumber>;

    "referralFirstBonus()"(overrides?: CallOverrides): Promise<BigNumber>;

    referralProgram(overrides?: CallOverrides): Promise<BigNumber>;

    "referralProgram()"(overrides?: CallOverrides): Promise<BigNumber>;

    referralSecondBonus(overrides?: CallOverrides): Promise<BigNumber>;

    "referralSecondBonus()"(overrides?: CallOverrides): Promise<BigNumber>;

    referralThirdBonus(overrides?: CallOverrides): Promise<BigNumber>;

    "referralThirdBonus()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    reset(name: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "reset(bytes32)"(
      name: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxLeverageFactor(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxLeverageFactor(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setParamGovernance(
      paramGovernance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setParamGovernance(address)"(
      paramGovernance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPriceGuard(value: string, overrides?: Overrides): Promise<BigNumber>;

    "setPriceGuard(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSwapRouter(value: string, overrides?: Overrides): Promise<BigNumber>;

    "setSwapRouter(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTokenConverter(
      tokenConverter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenConverter(address)"(
      tokenConverter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "swapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenConverter(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenConverter()"(overrides?: CallOverrides): Promise<BigNumber>;

    traderProfitFee(overrides?: CallOverrides): Promise<BigNumber>;

    "traderProfitFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    treasureFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "treasureFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasurer(overrides?: CallOverrides): Promise<BigNumber>;

    "treasurer()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(overrides?: Overrides): Promise<BigNumber>;

    "upgrade()"(overrides?: Overrides): Promise<BigNumber>;

    xWOW(overrides?: CallOverrides): Promise<BigNumber>;

    "xWOW()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCURACY_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ACCURACY_DIVISOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FEE_TOKEN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "REVISION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WOW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WOW()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseBorrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseBorrowRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    excessSlope(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "excessSlope()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      owner: string,
      paramGovernance: string,
      maxLiquidationReward: BigNumberish,
      minPositionDeposit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,uint256)"(
      owner: string,
      paramGovernance: string,
      maxLiquidationReward: BigNumberish,
      minPositionDeposit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidationMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidationMargin()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidationReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxLeverageFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLiquidationReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxLiquidationReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxPriceThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRateMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxRateMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minPositionDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minPositionDeposit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minWOWBalance(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minWOWBalance(uint256)"(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optimalSlope(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "optimalSlope()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimalUtilization(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "optimalUtilization()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overrideAddress(
      name: BytesLike,
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "overrideAddress(bytes32,address)"(
      name: BytesLike,
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    overrideParam(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "overrideParam(bytes32,uint256)"(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paramGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paramGovernance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolUtilizationAllowance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolUtilizationAllowance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceGuard()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralFirstBonus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referralFirstBonus()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralProgram(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "referralProgram()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralSecondBonus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referralSecondBonus()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralThirdBonus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referralThirdBonus()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    reset(
      name: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reset(bytes32)"(
      name: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxLeverageFactor(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxLeverageFactor(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setParamGovernance(
      paramGovernance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setParamGovernance(address)"(
      paramGovernance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPriceGuard(
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPriceGuard(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSwapRouter(
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSwapRouter(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTokenConverter(
      tokenConverter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenConverter(address)"(
      tokenConverter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "swapRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenConverter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenConverter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    traderProfitFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "traderProfitFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    treasureFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasureFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasurer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasurer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgrade(overrides?: Overrides): Promise<PopulatedTransaction>;

    "upgrade()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    xWOW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xWOW()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
