/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockDiaPriceFeedInterface extends ethers.utils.Interface {
  functions: {
    "getAmountOut(uint256,bool)": FunctionFragment;
    "getPrice(bool)": FunctionFragment;
    "getValue(string)": FunctionFragment;
    "setValue(string,uint128,uint128)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [boolean]): string;
  encodeFunctionData(functionFragment: "getValue", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setValue",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setValue", data: BytesLike): Result;

  events: {};
}

export class MockDiaPriceFeed extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockDiaPriceFeedInterface;

  functions: {
    getAmountOut(
      amountIn: BigNumberish,
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    "getAmountOut(uint256,bool)"(
      amountIn: BigNumberish,
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getPrice(
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    "getPrice(bool)"(
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getValue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; updatedAt: BigNumber }
    >;

    "getValue(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; updatedAt: BigNumber }
    >;

    setValue(
      arg0: string,
      value: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setValue(string,uint128,uint128)"(
      arg0: string,
      value: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getAmountOut(
    amountIn: BigNumberish,
    sell: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountOut(uint256,bool)"(
    amountIn: BigNumberish,
    sell: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(sell: boolean, overrides?: CallOverrides): Promise<BigNumber>;

  "getPrice(bool)"(
    sell: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { price: BigNumber; updatedAt: BigNumber }
  >;

  "getValue(string)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { price: BigNumber; updatedAt: BigNumber }
  >;

  setValue(
    arg0: string,
    value: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setValue(string,uint128,uint128)"(
    arg0: string,
    value: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getAmountOut(
      amountIn: BigNumberish,
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,bool)"(
      amountIn: BigNumberish,
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(sell: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    "getPrice(bool)"(
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; updatedAt: BigNumber }
    >;

    "getValue(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; updatedAt: BigNumber }
    >;

    setValue(
      arg0: string,
      value: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setValue(string,uint128,uint128)"(
      arg0: string,
      value: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAmountOut(
      amountIn: BigNumberish,
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,bool)"(
      amountIn: BigNumberish,
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(sell: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    "getPrice(bool)"(
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getValue(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setValue(
      arg0: string,
      value: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setValue(string,uint128,uint128)"(
      arg0: string,
      value: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAmountOut(
      amountIn: BigNumberish,
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountOut(uint256,bool)"(
      amountIn: BigNumberish,
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(bool)"(
      sell: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getValue(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setValue(
      arg0: string,
      value: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setValue(string,uint128,uint128)"(
      arg0: string,
      value: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
